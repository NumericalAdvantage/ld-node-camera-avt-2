// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IMAGE_LINK_DEV_H_
#define FLATBUFFERS_GENERATED_IMAGE_LINK_DEV_H_

#include "flatbuffers/flatbuffers.h"

#include "GenericMatrix3D_generated.h"

namespace link_dev {

struct Image;
struct ImageT;

enum Format {
  Format_NotSpecified = 0,
  Format_GRAY_U8 = 1,
  Format_RGB_U8 = 2,
  Format_BGR_U8 = 3,
  Format_DEPTH_U16 = 4,
  Format_DEPTH_F32 = 5,
  Format_COMPRESSED_JPEG = 6,
  Format_MIN = Format_NotSpecified,
  Format_MAX = Format_COMPRESSED_JPEG
};

inline const Format (&EnumValuesFormat())[7] {
  static const Format values[] = {
    Format_NotSpecified,
    Format_GRAY_U8,
    Format_RGB_U8,
    Format_BGR_U8,
    Format_DEPTH_U16,
    Format_DEPTH_F32,
    Format_COMPRESSED_JPEG
  };
  return values;
}

inline const char * const *EnumNamesFormat() {
  static const char * const names[] = {
    "NotSpecified",
    "GRAY_U8",
    "RGB_U8",
    "BGR_U8",
    "DEPTH_U16",
    "DEPTH_F32",
    "COMPRESSED_JPEG",
    nullptr
  };
  return names;
}

inline const char *EnumNameFormat(Format e) {
  if (e < Format_NotSpecified || e > Format_COMPRESSED_JPEG) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFormat()[index];
}

struct ImageT : public flatbuffers::NativeTable {
  typedef Image TableType;
  Format format;
  std::unique_ptr<GenericMatrix3DT> data;
  std::vector<uint8_t> CompressedData;
  ImageT()
      : format(Format_NotSpecified) {
  }
};

struct Image FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ImageT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FORMAT = 4,
    VT_DATA = 6,
    VT_COMPRESSEDDATA = 8
  };
  Format format() const {
    return static_cast<Format>(GetField<uint8_t>(VT_FORMAT, 0));
  }
  const GenericMatrix3D *data() const {
    return GetPointer<const GenericMatrix3D *>(VT_DATA);
  }
  const flatbuffers::Vector<uint8_t> *CompressedData() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COMPRESSEDDATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FORMAT) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           VerifyOffset(verifier, VT_COMPRESSEDDATA) &&
           verifier.VerifyVector(CompressedData()) &&
           verifier.EndTable();
  }
  ImageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ImageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Image> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ImageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ImageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_format(Format format) {
    fbb_.AddElement<uint8_t>(Image::VT_FORMAT, static_cast<uint8_t>(format), 0);
  }
  void add_data(flatbuffers::Offset<GenericMatrix3D> data) {
    fbb_.AddOffset(Image::VT_DATA, data);
  }
  void add_CompressedData(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> CompressedData) {
    fbb_.AddOffset(Image::VT_COMPRESSEDDATA, CompressedData);
  }
  explicit ImageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ImageBuilder &operator=(const ImageBuilder &);
  flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Image>(end);
    return o;
  }
};

inline flatbuffers::Offset<Image> CreateImage(
    flatbuffers::FlatBufferBuilder &_fbb,
    Format format = Format_NotSpecified,
    flatbuffers::Offset<GenericMatrix3D> data = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> CompressedData = 0) {
  ImageBuilder builder_(_fbb);
  builder_.add_CompressedData(CompressedData);
  builder_.add_data(data);
  builder_.add_format(format);
  return builder_.Finish();
}

inline flatbuffers::Offset<Image> CreateImageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    Format format = Format_NotSpecified,
    flatbuffers::Offset<GenericMatrix3D> data = 0,
    const std::vector<uint8_t> *CompressedData = nullptr) {
  auto CompressedData__ = CompressedData ? _fbb.CreateVector<uint8_t>(*CompressedData) : 0;
  return link_dev::CreateImage(
      _fbb,
      format,
      data,
      CompressedData__);
}

flatbuffers::Offset<Image> CreateImage(flatbuffers::FlatBufferBuilder &_fbb, const ImageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ImageT *Image::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ImageT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Image::UnPackTo(ImageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = format(); _o->format = _e; };
  { auto _e = data(); if (_e) _o->data = std::unique_ptr<GenericMatrix3DT>(_e->UnPack(_resolver)); };
  { auto _e = CompressedData(); if (_e) { _o->CompressedData.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->CompressedData[_i] = _e->Get(_i); } } };
}

inline flatbuffers::Offset<Image> Image::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ImageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateImage(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Image> CreateImage(flatbuffers::FlatBufferBuilder &_fbb, const ImageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ImageT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _format = _o->format;
  auto _data = _o->data ? CreateGenericMatrix3D(_fbb, _o->data.get(), _rehasher) : 0;
  auto _CompressedData = _o->CompressedData.size() ? _fbb.CreateVector(_o->CompressedData) : 0;
  return link_dev::CreateImage(
      _fbb,
      _format,
      _data,
      _CompressedData);
}

}  // namespace link_dev

#endif  // FLATBUFFERS_GENERATED_IMAGE_LINK_DEV_H_
